{"version":3,"sources":["preferred-theme.ts","configuration-component.ts","index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAM,cAAc,GAAG,MAAM,CAAC,UAAP,CAAkB,8BAAlB,EAAkD,OAAlD,GAA4D,aAA5D,GAA4E,cAAnG;;AAEA,IAAM,gBAAgB,GAAG,wBAAzB;;;;;;;;;;ACEP;;AAEA,IAAA,sBAAA,GAAA,YAAA;AAOI,WAAA,sBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACI,SAAK,OAAL,GAAe,QAAQ,CAAC,aAAT,CAAuB,MAAvB,CAAf;AACA,SAAK,OAAL,CAAa,SAAb,GAAyB,0pOAAzB;AA+HA,SAAK,OAAL,CAAa,gBAAb,CAA8B,QAA9B,EAAwC,UAAA,KAAA,EAAK;AAAI,aAAA,KAAK,CAAC,cAAN,EAAA;AAAsB,KAAvE;AACA,SAAK,OAAL,CAAa,MAAb,GAAsB,aAAtB;AAEA,SAAK,MAAL,GAAc,KAAK,OAAL,CAAa,aAAb,CAA2B,SAA3B,CAAd;AAEA,SAAK,IAAL,GAAY,KAAK,OAAL,CAAa,aAAb,CAA2B,OAA3B,CAAZ;AAEA,SAAK,KAAL,GAAa,KAAK,OAAL,CAAa,aAAb,CAA2B,QAA3B,CAAb;AAEA,SAAK,KAAL,GAAa,KAAK,OAAL,CAAa,aAAb,CAA2B,QAA3B,CAAb;AAEA,QAAM,eAAe,GAAG,QAAQ,CAAC,cAAT,CAAwB,kBAAxB,CAAxB;AAEA,SAAK,KAAL,CAAW,gBAAX,CAA4B,QAA5B,EAAsC,YAAA;AAClC,UAAI,KAAK,GAAG,KAAI,CAAC,KAAL,CAAW,KAAvB;;AAEA,UAAI,KAAK,KAAK,gCAAd,EAAgC;AAC5B,QAAA,KAAK,GAAG,8BAAR;AACH;;AAED,MAAA,eAAe,CAAC,IAAhB,GAAuB,yBAAuB,KAAvB,GAA4B,YAAnD;AAEA,UAAM,OAAO,GAAG;AACZ,QAAA,IAAI,EAAE,WADM;AAEZ,QAAA,KAAK,EAAA;AAFO,OAAhB;AAIA,UAAM,OAAO,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAhB;AAEA,MAAA,OAAO,CAAC,aAAR,CAAuB,WAAvB,CAAmC,OAAnC,EAA4C,QAAQ,CAAC,MAArD;AACH,KAhBD;AAkBA,QAAM,UAAU,GAAG,KAAK,OAAL,CAAa,aAAb,CAA2B,cAA3B,CAAnB;AAEA,IAAA,UAAU,CAAC,gBAAX,CAA4B,OAA5B,EAAqC,YAAA;AAAM,aAAA,KAAI,CAAC,mBAAL,CAAyB,KAAI,CAAC,MAAL,CAAY,WAArC,CAAA;AAA2D,KAAtG;AAEA,SAAK,OAAL,CAAa,gBAAb,CAA8B,QAA9B,EAAwC,YAAA;AAAM,aAAA,KAAI,CAAC,YAAL,EAAA;AAAmB,KAAjE;AACA,SAAK,OAAL,CAAa,gBAAb,CAA8B,OAA9B,EAAuC,YAAA;AAAM,aAAA,KAAI,CAAC,YAAL,EAAA;AAAmB,KAAhE;AACA,SAAK,YAAL;AACH;;AAEO,EAAA,sBAAA,CAAA,SAAA,CAAA,YAAA,GAAR,YAAA;AACI,QAAM,OAAO,GAAG,KAAK,OAAL,CAAa,aAAb,CAA2B,+BAA3B,CAAhB;AACA,QAAI,WAAJ;;AAGA,QAAI,OAAO,CAAC,KAAR,KAAkB,cAAtB,EAAsC;AAClC,MAAA,WAAW,GAAG,KAAK,yBAAL,CAA+B,cAA/B,EAA+C,2BAA/C,CAAd;AACH,KAFD,MAEO,IAAI,OAAO,CAAC,KAAR,KAAkB,eAAtB,EAAuC;AAC1C,MAAA,WAAW,GAAG,KAAK,yBAAL,CAA+B,YAA/B,EAA6C,mBAA7C,CAAd;AACH,KAFM,MAEA;AACH,MAAA,WAAW,GAAG,KAAK,yBAAL,CAA+B,YAA/B,EAA6C,OAAO,CAAC,KAArD,CAAd;AACH;;AAED,SAAK,MAAL,CAAY,SAAZ,GAAwB,KAAK,gBAAL,CACpB,KAAK,yBAAL,CAA+B,MAA/B,EAAuC,KAAK,IAAL,CAAU,KAAV,KAAoB,EAApB,GAAyB,mBAAzB,GAA+C,KAAK,IAAL,CAAU,KAAhG,IAAyG,IAAzG,GACA,WADA,GACc,IADd,IAEC,KAAK,KAAL,CAAW,KAAX,GAAmB,KAAK,yBAAL,CAA+B,OAA/B,EAAwC,KAAK,KAAL,CAAW,KAAnD,IAA4D,IAA/E,GAAsF,EAFvF,IAGA,KAAK,yBAAL,CAA+B,OAA/B,EAAwC,KAAK,KAAL,CAAW,KAAnD,CAHA,GAG4D,IAH5D,GAIA,KAAK,yBAAL,CAA+B,aAA/B,EAA8C,WAA9C,CALoB,CAAxB;AAMH,GAnBO;;AAqBA,EAAA,sBAAA,CAAA,SAAA,CAAA,yBAAA,GAAR,UAAkC,IAAlC,EAAgD,KAAhD,EAA6D;AAEzD,WAAO,wDAAkD,IAAlD,GAAsD,+DAAtD,GAAiH,KAAjH,GAAsH,gDAA7H;AACH,GAHO;;AAKA,EAAA,sBAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,UAAyB,KAAzB,EAAsC;AAElC,WAAO,0OAA0N,KAA1N,GAA+N,gKAAtO;AACH,GAHO;;AAKA,EAAA,sBAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,UAA4B,IAA5B,EAAwC;AACpC,QAAM,QAAQ,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAjB;AAGA,IAAA,QAAQ,CAAC,KAAT,CAAe,OAAf,GAAyB,4HAAzB;AACA,IAAA,QAAQ,CAAC,KAAT,GAAiB,IAAjB;AACA,IAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,QAA1B;AACA,IAAA,QAAQ,CAAC,MAAT;;AAEA,QAAI;AACA,MAAA,QAAQ,CAAC,WAAT,CAAqB,MAArB;AAEH,KAHD,CAGE,OAAO,GAAP,EAAY,CAAG;;AAEjB,IAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,QAA1B;AACH,GAfO;;AAgBZ,SAAA,sBAAA;AA/NA,CAAA,EAAA;;;;;;ACNA;;AAEA,QAAQ,CAAC,aAAT,CAAuB,kBAAvB,EACK,qBADL,CAC2B,UAD3B,EACuC,IAAI,8CAAJ,GAA6B,OADpE","file":"src.77de5100.js","sourceRoot":"../src","sourcesContent":["export const preferredTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'github-dark' : 'github-light';\n\nexport const preferredThemeId = 'preferred-color-scheme';\n","/**\n * configuration ÁªÑ‰ª∂Â∏ÉÂ±Ä\n */\n\nimport { preferredThemeId, preferredTheme } from './preferred-theme';\n\nexport class ConfigurationComponent {\n    public readonly element: HTMLFormElement;\n    private readonly script: HTMLDivElement;\n    private readonly repo: HTMLInputElement;\n    private readonly label: HTMLInputElement;\n    private readonly theme: HTMLSelectElement;\n\n    constructor() {\n        this.element = document.createElement('form');\n        this.element.innerHTML = `\n            <h3 id=\"heading-repository\">Repository</h3>\n            <p>Choose the repository vartalk will connect to.</p>\n            <ol>\n                <li>Make sure the repo is public, otherwise your readers will not be able to view the issues/comments.</li>\n                <li>Make sure the <a href=\"https://github.com/apps/vartalk\">vartalk app</a> is installed on the repo, otherwise users will not be able to post comments.</li>\n                <li>If your repo is a fork, navigate to its <em>settings</em> tab and confirm the <em>issues</em> feature is turned on. </li>\n            </ol>\n            <fieldset>\n                <div>\n                    <label for=\"repo\">repo:</label><br/>\n                    <input id=\"repo\" class=\"form-control\" type=\"text\" placeholder=\"owner/repo\">\n                    <p class=\"note\">A <strong>public</strong> GitHub repository. This is where the blog post issues and issue-comments will be posted.</p>\n                </div>\n            </fieldset>\n\n            <h3 id=\"heading-mapping\">Blog Post ‚ÜîÔ∏è Issue Mapping</h3>\n            <p>Choose the mapping between blog posts and GitHub issues.</p>\n            <fieldset>\n                <div class=\"form-checkbox\">\n                    <label>\n                        <input type=\"radio\" value=\"pathname\" name=\"mapping\" checked=\"checked\">\n                        Issue title contains page pathname\n                        <p class=\"note\">\n                            Utterances will search for an issue whose title contains the blog post's pathname\n                            URL component. If a matching issue is not found, Utterances will automatically\n                            create one the first time someone comments on your post.\n                        </p>\n                    </label>\n                </div>\n                <div class=\"form-checkbox\">\n                    <label>\n                        <input type=\"radio\" value=\"url\" name=\"mapping\">\n                        Issue title contains page URL\n                        <p class=\"note\">\n                            Utterances will search for an issue whose title contains the blog post's URL.\n                            If a matching issue is not found, Utterances will automatically create one the first\n                            time someone comments on your post.\n                        </p>\n                    </label>\n                </div>\n                <div class=\"form-checkbox\">\n                    <label>\n                        <input type=\"radio\" value=\"title\" name=\"mapping\">\n                        Issue title contains page title\n                        <p class=\"note\">\n                            Utterances will search for an issue whose title contains the blog post's title.\n                            If a matching issue is not found, Utterances will automatically create one the first\n                            time someone comments on your post.\n                        </p>\n                    </label>\n                </div>\n                <div class=\"form-checkbox\">\n                    <label>\n                        <input type=\"radio\" value=\"og:title\" name=\"mapping\">\n                        Issue title contains page og:title\n                        <p class=\"note\">\n                            Utterances will search for an issue whose title contains the page's\n                            <a href=\"http://ogp.me/\">Open Graph</a> title meta.\n                            If a matching issue is not found, Utterances will automatically create one the first\n                            time someone comments on your post.\n                        </p>\n                    </label>\n                </div>\n                <div class=\"form-checkbox\">\n                    <label>\n                        <input type=\"radio\" value=\"issue-number\" name=\"mapping\">\n                        Specific issue number\n                        <p class=\"note\">\n                            You configure Utterances to load a specific issue by number. Issues are not automatically created.\n                        </p>\n                    </label>\n                </div>\n                <div class=\"form-checkbox\">\n                    <label>\n                        <input type=\"radio\" value=\"specific-term\" name=\"mapping\">\n                        Issue title contains specific term\n                        <p class=\"note\">\n                            You configure Utterances to search for an issue whose title contains a specific term of your choosing.\n                            If a matching issue is not found, Utterances will automatically create one the first\n                            time someone comments on your post. The issue's title will be the term you chose.\n                        </p>\n                    </label>\n                </div>\n            </fieldset>\n\n            <h3 id=\"heading-issue-label\">Issue Label</h3>\n            <p>Choose the label that will be assigned to issues created by Utterances.</p>\n            <fieldset>\n                <div>\n                    <label for=\"label\">label (optional):</label><br/>\n                    <input id=\"label\" class=\"form-control\" type=\"text\" placeholder=\"Comment\">\n                    <p class=\"note\">\n                        Label names are case sensitive.\n                        The label must exist in your repo-\n                        Utterances cannot attach labels that do not exist.\n                        Emoji are supported in label names.‚ú®üí¨‚ú®\n                    </p>\n                </div>\n            </fieldset>\n\n            <h3 id=\"heading-theme\">Theme</h3>\n            <p>\n                Choose an Utterances theme that matches your blog.\n                Can't find a theme you like?\n                <a href=\"https://github.com/vartalk/vartalk/blob/master/CONTRIBUTING.md\">Contribute</a> a custom theme.\n            </p>\n\n            <select id=\"theme\" class=\"form-select\" value=\"github-light\" aria-label=\"Theme\">\n                <option value=\"github-light\">GitHub Light</option>\n                <option value=\"github-dark\">GitHub Dark</option>\n                <option value=\"preferred-color-scheme\">Preferred Color Scheme</option>\n                <option value=\"github-dark-orange\">GitHub Dark Orange</option>\n                <option value=\"icy-dark\">Icy Dark</option>\n                <option value=\"dark-blue\">Dark Blue</option>\n                <option value=\"photon-dark\">Photon Dark</option>\n            </select>\n\n            <h3 id=\"heading-enable\">Enable Utterances</h3>\n\n            <p>Add the following script tag to your blog's template. Position it where you want the comments to appear. Customize the layout using the <code>.vartalk</code> and <code>.vartalk-frame</code> selectors.</p>\n            <div class=\"config-field\" id=\"script\" class=\"highlight highlight-text-html-basic\"></div>\n            <button id=\"copy-button\" type=\"button\" class=\"btn btn-blue code-action\">Copy</button>\n            <br/>\n            <br/>\n        `;\n\n        this.element.addEventListener('submit', event => event.preventDefault());\n        this.element.action = 'javascript:';\n\n        this.script = this.element.querySelector('#script') as HTMLDivElement;\n\n        this.repo = this.element.querySelector('#repo') as HTMLInputElement;\n\n        this.label = this.element.querySelector('#label') as HTMLInputElement;\n\n        this.theme = this.element.querySelector('#theme') as HTMLSelectElement;\n\n        const themeStylesheet = document.getElementById('theme-stylesheet') as HTMLLinkElement;\n\n        this.theme.addEventListener('change', () => {\n            let theme = this.theme.value;\n\n            if (theme === preferredThemeId) {\n                theme = preferredTheme;\n            }\n\n            themeStylesheet.href = `/stylesheets/themes/${theme}/index.css`;\n\n            const message = {\n                type: 'set-theme',\n                theme,\n            };\n            const vartalk = document.querySelector('iframe')!;\n\n            vartalk.contentWindow!.postMessage(message, location.origin);\n        });\n\n        const copyButton = this.element.querySelector('#copy-button') as HTMLButtonElement;\n\n        copyButton.addEventListener('click', () => this.copyTextToClipboard(this.script.textContent as string));\n\n        this.element.addEventListener('change', () => this.outputConfig());\n        this.element.addEventListener('input', () => this.outputConfig());\n        this.outputConfig();\n    }\n\n    private outputConfig() {\n        const mapping = this.element.querySelector('input[name=\"mapping\"]:checked') as HTMLInputElement;\n        let mappingAttr: string;\n\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (mapping.value === 'issue-number') {\n            mappingAttr = this.makeConfigScriptAttribute('issue-number', '[ENTER ISSUE NUMBER HERE]');\n        } else if (mapping.value === 'specific-term') {\n            mappingAttr = this.makeConfigScriptAttribute('issue-term', '[ENTER TERM HERE]');\n        } else {\n            mappingAttr = this.makeConfigScriptAttribute('issue-term', mapping.value);\n        }\n\n        this.script.innerHTML = this.makeConfigScript(\n            this.makeConfigScriptAttribute('repo', this.repo.value === '' ? '[ENTER REPO HERE]' : this.repo.value) + '\\n' +\n            mappingAttr + '\\n' +\n            (this.label.value ? this.makeConfigScriptAttribute('label', this.label.value) + '\\n' : '') +\n            this.makeConfigScriptAttribute('theme', this.theme.value) + '\\n' +\n            this.makeConfigScriptAttribute('crossorigin', 'anonymous'));\n    }\n\n    private makeConfigScriptAttribute(name: string, value: string) {\n        // tslint:disable-next-line:max-line-length\n        return `<span class=\"pl-s1\">        <span class=\"pl-e\">${name}</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>${value}<span class=\"pl-pds\">\"</span></span></span>`;\n    }\n\n    private makeConfigScript(attrs: string) {\n        // tslint:disable-next-line:max-line-length\n        return `<pre><span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://vartalk.cn/client.js<span class=\"pl-pds\">\"</span></span></span>\\n${attrs}\\n<span class=\"pl-s1\">        <span class=\"pl-e\">async</span>&gt;</span>\\n<span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></pre>`;\n    }\n\n    private copyTextToClipboard(text: string) {\n        const textArea = document.createElement('textarea');\n\n        // tslint:disable-next-line:max-line-length\n        textArea.style.cssText = `position:fixed;top:0;left:0;width:2em;height:2em;padding:0;border:none;outline:none;box-shadow:none;background:transparent`;\n        textArea.value = text;\n        document.body.appendChild(textArea);\n        textArea.select();\n\n        try {\n            document.execCommand('copy');\n            // tslint:disable-next-line:no-empty\n        } catch (err) { }\n\n        document.body.removeChild(textArea);\n    }\n}\n","import { ConfigurationComponent } from './configuration-component';\n\ndocument.querySelector('h2#configuration')!\n    .insertAdjacentElement('afterend', new ConfigurationComponent().element);\n"]}